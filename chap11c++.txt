A hierarchy is a diagram that shows how various objects are related. Most hierarchies either show a progression over time (386 -> 486 -> Pentium), or categorize things in a way that moves from general to specific (fruit -> apple -> red delicious). If you’ve ever taken biology, the famous domain, kingdom, phylum, class, order, family, genus, and species ordering defines a hierarchy (from general to specific).


****************inheritance
Inheritance in C++ takes place between classes. In an inheritance (is-a) relationship, the class being inherited from is called the parent class, base class, or superclass, and the class doing the inheriting is called the child class, derived class, or subclass.

class person{}
class player
{};
now player also has the attributes of a person. To add the attributes of a person to player we can 
1)add those attributes fo player class
2)add person as a data member
3)inherit person class in player


Inheriting from a base class means we don’t have to redefine the information from the base class in our derived classes. We automatically receive the member functions and member variables of the base class through inheritance, and then simply add the additional functions or member variables we want. This not only saves work, but also means that if we ever update or modify the base class (e.g. add new functions, or fix a bug), all of our derived classes will automatically inherit the changes!

For example, if we ever added a new function to Person, both Employee and Supervisor would automatically gain access to it. If we added a new variable to Employee, Supervisor would also gain access to it. This allows us to construct new classes in an easy, intuitive, and low-maintenance way!

class student:public person  //class student inherits class person
{};


base{};
constructed:public base
{};
when we constructed Derived, the Base portion of Derived got constructed first. This makes sense: logically, a child can not exist without a parent. It’s also the safe way to do things: the child class often uses variables and functions from the parent, but the parent class knows nothing about the child. Instantiating the parent class first ensures those variables are already initialized by the time the derived class is created and ready to use them.


when we create a object these 5 steps occur
Memory for base is set aside
The appropriate Base constructor is called
The initialization list initializes variables
The body of the constructor executes
Control is returned to the caller


base class constructor initialization

C++ gives us the ability to explicitly choose which Base class constructor will be called! To do this, simply add a call to the base class Constructor in the initialization list of the derived class:

base{};
derived:public base
{
int d
derived(int one,int two):base(two),d(one) //here it does not matter whether in the initialization list base(two) is written after or before, it {}			will always execute first


example

#include<iostream>
using namespace std;
class person
{
public:
string name;
int age;
person(int x,string v):age(x),name(v)
{
cout<<"person called"<<endl;
}
};
class student:public person
{
public:
int id;
student(string v,int x,int y):person(x,v),id(y)
{
cout<<"studetn called"<<endl;
}

};
int main()
{
student a("satinder",1,2);
cout<<a.name<<'\n'<<a.age<<'\n'<<a.id<<endl;

return 0;
}


First, main() calls C(int, double, char). The C constructor calls B(int, double). The B constructor calls A(int). Because A does not inherit from anybody, this is the first class we’ll construct. A is constructed, prints the value 5, and returns control to B. B is constructed, prints the value 4.3, and returns control to C. C is constructed, prints the value ‘R’, and returns control to main().

It is worth mentioning that constructors can only call constructors from their immediate parent/base class.

When a derived class is destroyed, each destructor is called in the reverse order of construction. In the above example, when c is destroyed, the C destructor is called first, then the B destructor, then the A destructor.


public:
    int m_public; // can be accessed by anybody
private:
    int m_private; // can only be accessed by Base members and friends (but not derived classes)
protected:
    int m_protected; // can be accessed by Base members, friends, and derived classes

};

if I do not specify the access specifier while inheriting then the default access specifier is private



for public inheritance
public members-> public
private member-> inaccessible
protected member-> protected


if we have a function in a base class and the derived inherits the base class. Then if this function is called using base class object or derived classs object , the base class function runs
but if I redefine that function in the derived, now if base object calls this function then base function runs and if the inherited calls then the inherited class function runs


sometimes we just want to add some code to the base class function
in that case, in the function defined in derived we can call the base function first and then add our implementation
for eg
Base::identify(); // call Base::identify() first
        std::cout << "I am a Derived\n"; // then identify ourselves     //so we are adding functionality to base class function

11.6a a bit is left in the end and 11,6b is not done


******multiple inheritance
The problem in multiple inheritance is that,
Suppose I have 2 classes a and b and both of them have a function named print, and class c inherits both these classes. Class c does not have 
print function, So if Imake a object of c and then call print, there will be a error since the compiler does not know which print to call(a or b)

but if c has a implementation of print() then there is no error, since c's print() will be called

***it is clear that the linker causes the error in such cases. No error from compiler side

this roblem can also be solved by telling which print to call

so if g is a object of class c
then g.b::print() will call class b's implementation of the print function


This thing also results in the diamond problem 
Because if class a and class b both have inherited some class O then this error was quite obvious
because both a and b would have same functions


