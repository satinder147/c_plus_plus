By default python lives in /usr/local/bin/pythonX.X in linux 
python can be closed by ctrl+d or exit()

python is case senstive

in python a statement end by a end line
to write multiline statemens end the state by \
amount of indentation is upon us but it should be consistent for each block

python is a type infered language, meaning it can automatically detect the datatype of the variable


we can have a else at the end of an for loop or an while loop

pass command is used in places where we don't have a body for a function or we don;t have abody for a loop. it just means skip. If we don;t write anything under it the compiler will give error

while defining a function if we write something between """ """ then that is known as the doc string


arguments
default arguments
if we a default arguments in the function definition, then all the arguments to its right must be default arguments

greet(name = "Bruce",msg = "How do you do?")
in this we can ensure that we can pass in the variables in any order

we can pass any number of parameters to a function, given they are received by (*at)
then before sending the arguments, python packs them in a tuple, which can unpacked or read using a for loop


anonymous function 
functions without a name--> they instead of def are defined using the lambda keyword.

lambda arguments: expression-->syntax
it can have any number of arguments but only one expression.
 d=lambda x:x*2 --> eg
it is called using d(2)

This function has no name. It returns a function object which is assigned to the identifier d



filter function 
takes argument lambda function and a list
my_list = [1, 5, 4, 6, 8, 11, 3, 12]

new_list = list(filter(lambda x: (x%2 == 0) , my_list))

# Output: [4, 6, 8, 12]
print(new_list)
result is a list of only even numbers


map function

my_list = [1, 5, 4, 6, 8, 11, 3, 12]

new_list = list(map(lambda x: x * 2 , my_list))

# Output: [2, 10, 8, 12, 16, 22, 6, 24]
print(new_list)



although we can print a global varibale inside a function but we can;t modyfy it.


nonlocal keyword is used to use to make a non local variable

^^^^^^^^^^^read about nested functions
see global in nested function again

import module 
then use functions using module.function_name()

we can do import module as m and use m in place of module
or we can do from module import * --> but not a goood practice

python looks for the modules in the following order
1) current directory
2) path variable
3) then the place where python in installed

import sys
sys.path provides all the paths where python looks for modules


python imports modules only once in a entire session()
if we have to reload the module we have to use reload function 

import imp
imp.reload(moudle_name)

dir(module name) --> gives the name of all the names(function names and bulit in attributes(default)--> start with _ ) inside a module

__name__ gives the name of the module 

that is why it is written like if(__name__=="__main__") then execute things 
because main should not run if the module is imported in some other file


5+3j is a complex number

(1.1+2.2)==(3.3) evaluates as false 
floating point number are only accurate upto 15 digits, then the 16th is inaccurate

binary numbers can be written with a prefix 0b or 0B
hexadecimal numbers can be written with prefix 0x or 0X
octal number can be written with 0o or 0O prefix


Floating point operations are carried out must faster than Decimal operations.

python has two modules namely decimal and fraction which are used to solve ambiguaties with addition and multiplication.




python math module has function like 
cos,cosh,sin,sinh,factorial 

lists
they can have different datatypes
they can have hetrogenous datatypes
n_list = ["Happy", [2,0,1,5]]

del a[0] deltes 1 elemetns
del a deletes complete list

list=[] empty list
append(x) appends to the end 

+ can be used to combine two lists
* 10 will generate a list have the list 10 times in it

a[:2]=[1,2,3,4] this works replacing 2 numbers with four
append can only add one elements
whereas extend([1,2,3]) appends three numbers to the end

remove(1) will remove 1 from the list (only first one)
pop can be used to remove a particular element

list.clear() clears the list

we can even clear a portion of list like a[2:5]=[]

apart from these list have a copy method that returns a shallow copy 

pow2 = [2 ** x for x in range(10)]--> such statement are called list comprehension

any(list_name) returns true if any 1 element in the list is true
all(list_name) returns true if all elements in the lists are true


Return an enumerate object. It contains the index and value of all the items of list as a tuple. --> enumerate .i.e it returns (index,elements) tuple

tuple
similar to list but we cannot change the elements of a tuple once assigned

Since tuple are immutable, iterating through tuple is faster than with list. So there is a slight performance boost.

If you have data that doesn't change, implementing it as tuple will guarantee that it remains write-protected.
tuples can have hetrogenous data

my_tuple = (1, 2, 3)
or my_tuple=1,2,3,4 is similar to above
a,b,c,d=my_tuple --> tuple unpacking

to make a tuple with one element we have to end the tuple with a ","
indexing,slicing is similar to lists
tuple elements are immutable, meaning they can't be changed, but if one element of the tuple is a list(or any other mutable thing) then that element can be cahnged

+ and * work for tuples work similar to lists
del tuple_name deletes it


strings
""" """ is used for multiline strings
slicing and indexing works similar to lists
strings are immuatble 

strings can be indexed,sliced simlar to lists

strings have methods like lower(), upper(), join(), split(), find(), replace()



\newline	Backslash and newline ignored
\\	Backslash
\'	Single quote
\"	Double quote
\a	ASCII Bell

\b	ASCII Backspace
\f	ASCII Formfeed
\n	ASCII Linefeed
\r	ASCII Carriage Return
\t	ASCII Horizontal Tab
\v	ASCII Vertical Tab
\ooo	Character with octal value ooo
\xHH	Character with hexadecimal value HH





placing a r , R in front of string ignore escape sequences 
r"This is \x61 \ngood example"
This is \x61 \ngood example

format method
a="my name is {} and I live in {}".format("satinder","pune")

a="my name is {0} and I live in {1}".format("satinder","pune")
indexed formatting



even this works
eyword_order = "{s}, {b} and {j}".format(j='John',b='Bill',s='Sean')

"Binary representation of {0} is {0:b}".format(12)
binary of 12 is printed

round off
"One third is: {0:.3f}".format(1/3)


set is mutable
my_set = {1, 2, 3}
set can have different types of elements but cannot have mutable elements like lists

list can be converted into list my_set = set([1,2,3,2])

a={} creates a empty dictionary 
to make a set we have to use a=set()

We cannot access or change an element of set using indexing or slicing



set_name.add() is used to add one elements
whereas set_name.update() is use to add multipl eelements

my_set.update([2,3,4])


A particular item can be removed from set using methods, discard() and remove().

The only difference between the two is that, while using discard() if the item does not exist in the set, it remains unchanged. But remove() will raise an error in such condition.
clear is used to remove all elements

A.union(b) gives aub
A.intersection(B)
a.difference(b)
A.symmetric_difference(B)

for i in set_name:
	print(i)

dictionaries
a={} to create empty dictionary
they are mutable
del is used to delete elements
dic_name.get(key) returns the values. If we used dic_name[key] then it would have caused key error if the key was not found 

clear is ued to claer the dictionary

dic_name.pop(key) will return the value and pop the key,value pair


files
open(filepath,w or r or a) 
default is read mode for text mode and for binary mode it returns number of bytes


'r'	Open a file for reading. (default)
'w'	Open a file for writing. Creates a new file if it does not exist or truncates the file if it exists.
'x'	Open a file for exclusive creation. If the file already exists, the operation fails.
'a'	Open for appending at the end of the file without truncating it. Creates a new file if it does not exist.
't'	Open in text mode. (default)
'b'	Open in binary mode.
'+'	Open a file for updating (reading and writing)

open(path,r+b)
reads in binary mode
r+b is read and write in binary mode




Unlike other languages, the character 'a' does not imply the number 97 until it is encoded using ASCII (or other equivalent encodings).

Moreover, the default encoding is platform dependent. In windows, it is 'cp1252' but 'utf-8' in Linux.

So, we must not also rely on the default encoding or else our code will behave differently in different platforms.

Hence, when working with files in text mode, it is highly recommended to specify the encoding type.

f=open()
f.close() --> to close the file

with open() as f: 
	operations on file
it ensures that the file is closed when the with block exits

or we can use try finally 

try:
	f=open()
finally:
	f.close()

write mode overwrites the file , so use append mode


f.read() will read file from beginning to end
f.read(4) will read from beginning till 4 characters
then the pointer advances and if we write f.read() then it will read from 4 till end
f.tell() tells the current position
f.seek(0) takes it to the beggining

f.readline() returns the line for the current position
f.readlines() returns a  list of lines.



close()			Close an open file. It has no effect if the file is already closed.
detach()		Separate the underlying binary buffer from the TextIOBase and return it.
fileno()		Return an integer number (file descriptor) of the file.
flush()			Flush the write buffer of the file stream.
isatty()		Return True if the file stream is interactive.
read(n)			Read atmost n characters form the file. Reads till end of file if it is negative or None.
readable()		Returns True if the file stream can be read from.
readline(n=-1)		Read and return one line from the file. Reads in at most n bytes if specified.
readlines(n=-1)		Read and return a list of lines from the file. Reads in at most n bytes/characters if specified.
seek(offset,from=SEEK_SET)	Change the file position to offset bytes, in reference to from (start, current, end).
seekable()		Returns True if the file stream supports random access.
tell()			Returns the current file location.
truncate(size=None)	Resize the file stream to size bytes. If size is not specified, resize to current location.
writable()		Returns True if the file stream can be written to.
write(s)		Write string s to the file and return the number of characters written.
writelines(lines)	Write a list of lines to the file.




exceptions
Whenever these type of runtime error occur, Python creates an exception object. If not handled properly, it prints a traceback to that error along with some details about why that error occurred.

When these exceptions occur, it causes the current process to stop and passes it to the calling process until it is handled. If not handled, our program will crash.

try :	
	error prone code
catch: 
	print(sys.exc_info()


catch excepts all the errors

we can catch specific exception as well
like 

try:
   # do something
   pass

except ValueError:
   # handle ValueError exception
   pass

except (TypeError, ZeroDivisionError):
   # handle multiple exceptions
   # TypeError and ZeroDivisionError
   pass

except:
   # handle all other exceptions
   pass


after except we use a finally statement as well, this ensures that any allocated resources are freed if there is an error in the execution of the try block


raise ValueError("That is not a positive number!") --> can be used to raise a error forcebally

User defined exceptions

to make our own exceptions we have to inherit the Exception class
class Error(Exception):
	pass
class value_small(Error):
	pass

now we can raise value_small errors
try:
	something
except value_small:
	print(small occured)


OOP*********************************************************************
object has attributes(variables) and behaviour(functions)
class too can have doc strings

class_name.__doc__ gives the doc of the class
There are two types of variables 
1) class variables
class s_class:
	parrot=None
def __init__(self):
	self.nose=False
here parrot is the class variable
it can be accesed python class.parrot
2) instance variables 
obj=s_class()
obj.nose

class variables are same for all the instances

inheritance
class is inherited by 
class new(old):
	pass

in the new class __init__()
we have to write super().__init__() --> this will instantiate the variables of the parent class or we can write parent_class.__init__() but super is preferred


the definition of the parent class are inherited in the child class, and the functions which are similar their implemnetation for the child class is the one provided in the child class. .i.e child class modifies the behaviour of parent class


encapsulation --> prevent direct access of data
any attribute in the class with a leading "_" or "__" is a private variable and can't be accessed from outside the class
if a access is tried nothing happens
The value of these variables can be changed only by calling a class function.

polymorphism --> providing a common interface to two classes
suppose I have a function 

def b(bird):
	bird.fly()
this function is not in any class
but as both the classes will have function fly, this function can call the functions of both the classes


obj.func() translates into MyClass.func(ob).
that is why self is used.

instead of self other variables can be used.

attribute of a particular object can be deleted
del obj.name
similary functions can also be deleted



On the command del c1, this binding is removed and the name c1 is deleted from the corresponding namespace. The object however continues to exist in memory and if no other name is bound to it, it is later automatically destroyed.

This automatic destruction of unreferenced objects in Python is also called garbage collection.



 Function isinstance() returns True if the object is an instance of the class or other classes derived from it. Each and every class in Python inherits from the base class object.
isinstanceof(object,class with which it has to be checked)

**       isinstanceof(current_object,object)--> also shows true because all the classes inherit the object class


issubclass(2 arguments) is trianlge a sublclass of polynomial, or is bool sublclass of int shows true

class MultiDerived(Base1, Base2):
    pass 
can be used to inherit multiple classes at a single time.



In the multiple inheritance scenario, any specified attribute is searched first in the current class. If not found, the search continues into parent classes in depth-first, left-right fashion without searching same class twice.
This order is also called linearization of MultiDerived class and the set of rules used to find this order is called Method Resolution Order (MRO).
class_name.__mro__()

operators in python are overloaded, + behaves differently for string,int,float etc meaning + is overloaded 

If we try to print a object in python we get some address, to print this we have to use a special function __str__()

 def __str__(self):
        return "({0},{1})".format(self.x,self.y)
if now we print(obj)(if obj has only two attributes x and y) then these will be properly printed


def __add__(self,other):
        x = self.x + other.x
        y = self.y + other.y
        return Point(x,y)

add works in the similar way


Addition			p1 + p2	p1.__add__(p2)
Subtraction			p1 - p2	p1.__sub__(p2)
Multiplication			p1 * p2	p1.__mul__(p2)
Power				p1 ** p2	p1.__pow__(p2)
Division			p1 / p2	p1.__truediv__(p2)
Floor Division			p1 // p2	p1.__floordiv__(p2)
Remainder (modulo)		p1 % p2	p1.__mod__(p2)
Bitwise Left Shift		p1 << p2	p1.__lshift__(p2)
Bitwise Right Shift		p1 >> p2	p1.__rshift__(p2)
Bitwise AND			p1 & p2	p1.__and__(p2)
Bitwise OR			p1 | p2	p1.__or__(p2)
Bitwise XOR			p1 ^ p2	p1.__xor__(p2)
Bitwise NOT			s~p1	p1.__invert__()

using __lt__(self,other) we can overload comparison operators as well


	
Less than			p1 < p2	p1.__lt__(p2)
Less than or equal to		p1 <= p2	p1.__le__(p2)
Equal to			p1 == p2	p1.__eq__(p2)
Not equal to			p1 != p2	p1.__ne__(p2)
Greater than			p1 > p2	p1.__gt__(p2)
Greater than or equal to	p1 >= p2	p1.__ge__(p2)



python iterator
iterator are used for iterating data structures like lists,tuples etc
a=iter(data structure) returns a iter object
now using the function next() we can iterate a data structure
when we reach the end StopIteration exception is raised by which we can break out from the loop

Technically speaking, Python iterator object must implement two special methods, __iter__() and __next__(), collectively called the iterator protocol.
The iter() function (which in turn calls the __iter__() method) returns an iterator from them.

for loop implementaion in python

a=iter(list) (or any data structure
while 1:
	try:
		print(next(a))
	except StopIteration:
		break



next(obj) is same as obj.__next__()

building your own iterators
to make our own iterator we have to make a class and implement some functions like __init__() and __next__(),__iter__()


 class pow:
...     def __init__(self,max=0):
...             self.max=max
...     def __iter__(self):
...             self.n=0
...             return self
...     def __next__(self):
...             if(self.n<=self.max):
...                     res=2**self.n
...                     self.n=self.n+1
...                     return res
...             else:
...                     raise StopIteration
... 
>>> 
>>> a=pow(5)
>>> for i in a:
...     print(i)


python infinite iteratorss




python generator

iterators in python are very lengthy to implement
python generators are simple way to create iterators

It is fairly simple to create a generator in Python. It is as easy as defining a normal function with yield statement instead of a return statement.
a generator function uses a yield statement along with return 
a yield function pauses the function and stores it's state, when the function is called again, the function resumes from the previous stopped state.
when all the yield operations finish then Stop Iteration is raised.


def my_gen():
    n = 1
    print('This is printed first')
    # Generator function contains yield statements
    yield n

    n += 1
    print('This is printed second')
    yield n

    n += 1
    print('This is printed at last')
    yield n


if this function runs, on first call first print statement exceutes and others on subsequent calls.
this is called by c=my_gen()
next(c)
when it iterates over all the elements, StopIteration is raised
to restart it again we again have to write c=my_gen()
this can also be iterated using for i in mygen():
					print(i) (as StopIteration is already implemented inside for loop)




def rev_str(my_str):
    length = len(my_str)
    for i in range(length - 1,-1,-1):
        yield my_str[i]

# For loop to reverse the string
# Output:
# o
# l
# l
# e
# h
for char in rev_str("hello"):
     print(char)
the above generator function reverses the string 


Python Generator Expression

The syntax for generator expression is similar to that of a list comprehension in Python. But the square brackets are replaced with round parentheses.

The major difference between a list comprehension and a generator expression is that while list comprehension produces the entire list, generator expression produces one item at a time.

They are kind of lazy, producing items only when asked for. For this reason, a generator expression is much more memory efficient than an equivalent list comprehension.


a = (x**2 for x in my_list)
# Output: 1
print(next(a))

# Output: 9
print(next(a))

# Output: 36
print(next(a))

# Output: 100
print(next(a))

# Output: StopIteration
next(a)


generators benefit
easy implement
memory effiecient
 Represent Infinite Stream
Generators are excellent medium to represent an infinite stream of data. Infinite streams cannot be stored in memory and since generators produce only one item at a time, it can represent infinite stream of data.

def all_even():
    n = 0
    while True:
        yield n
        n += 2


read about pipeline generators



python nonlocal
def outside()
 msg = "Outside!"
        def inside():
            msg = "Inside!"
            print(msg)
        inside()
        print(msg)
printing the msg in inside will print the value "outside"
if outside is run then msg is inside for the inner scope and outside for the outer scope this is because python created 2 different msg variables
to prevent this we add nonlocal before msg in inside. This will diable python from making a new variable
nonlocal is like global

python closures

def print_msg(msg):
# This is the outer enclosing function

    def printer():
# This is the nested function
        print(msg)

    return printer  # this got changed

# Now let's try calling this function.
# Output: Hello
another = print_msg("Hello")
another()

This technique by which some data ("Hello") gets attached to the code is called closure in Python.

conditions for closure
We must have a nested function (function inside a function).
The nested function must refer to a value defined in the enclosing function.
The enclosing function must return the nested function.




def make_multiplier_of(n):
    def multiplier(x):
        return x * n
    return multiplier

# Multiplier of 3
times3 = make_multiplier_of(3)

# Multiplier of 5
times5 = make_multiplier_of(5)

# Output: 27
print(times3(9))

# Output: 15
print(times5(3))

# Output: 30
print(times5(times3(2)))

All function objects have a __closure__ attribute that returns a tuple of cell objects if it is a closure function. Referring to the example above, we know times3 and times5 are closure functions.


decorators

they can add functionality to existing code
This is also called metaprogramming as a part of the program tries to modify another part of the program at compile time.

def first(msg):
    print(msg)    

first("Hello")

second = first
second("Hello")

Such function that take other functions as arguments are also called higher order functions. 

for eg
def inc(x):
    return x + 1

def dec(x):
    return x - 1

def operate(func, x):
    result = func(x)
    return result
we can call operate(inc,3)
or operate(dec,3)

functions can be returned also
def is_called():
    def is_returned():
        print("Hello")
    return is_returned

new = is_called()

#Outputs "Hello"
new()


any object which implements the special method __call__() is termed callable. So, in the most basic sense, a decorator is a callable that returns a callable.

def make_pretty(func):
    def inner():
        print("I got decorated")
        func()
    return inner

def ordinary():
    print("I am ordinary")

>>> pretty = make_pretty(ordinary)
>>> pretty()
I got decorated
I am ordinary

here make_pretty was the decorator


@make_pretty
def ordinary():
    print("I am ordinary")

is same as

def ordinary():
    print("I am ordinary")
ordinary = make_pretty(ordinary)






implementation with parameters
def smart_divide(func):
   def inner(a,b):
      print("I am going to divide",a,"and",b)
      if b == 0:
         print("Whoops! cannot divide")
         return

      return func(a,b)
   return inner

@smart_divide
def divide(a,b):
    return a/b

do decorator last part again



@property
_a will be a private variable in a class




















print("""sdfad adf adf afsd df
 adfd fdf asdf  f
 asdfdf""")
print everything


 a=input("enter age")

''' ''', """ """ areused for both multiline comments and printing multiple lines
if a u is getting printed in front of words use %s

pydoc input --> shows input documentation
press q to exit


from sys import argv 
print(argv) prints the command line arguments
the args are in a list


close --> closes the file
read --> reads the files
readline --> reads only 1 line at a time
truncate --> clears the file
write(x) --> writes to the files

DEF ADD(*argv):
	function---- 
*argv will take all the arguments as an tuple
it can be unrolled using x1,x2,.....=argv

readline return a '\n'

we can write functions in python file, import the complete file into antoher file, and use the functions from the previous file.
for eg if a.py has function add
then in another file we have to write import a, a.add(1,2)
or we can have from a import *
and we can use the function as if they were in the same file

we can even write help(a) to get to know about all the function
we can even write help(a.add) to know about add function


cardinal and ordinal numbers

a={name:"satinder",age:20}
the above is a dictionary, to remove key value pairs from it we do 
del a["name"] and it will remove the name --> satinder value from the dictionary
or we can even delete the complete dictionary as well by writing del a

dictionary.items returns key value pairs which can be used to iterate through the dictionary
dictionary.key() will return an list of dict_keys
and dictionary.values() returns the values 

print("-"*10) prints "-" 10 times
del works in the similar way with lists as well

1)	ex 17 why the file had t obe closed
20 DICTIONARY GET()



public,protected and private
class variables are public by default

variables whose name precede with a "_" are protected variables
though these variables can be acessed from outside using their name, it is
upon the programmer to mke sure these variables are not used

private variables
variables whose names are prefixed with "__"(double underscore) are private
if we try to access them from the outside attribute error exception is raised
because python performs name mangling(name changing)--> __satinder-->
_classname__satinder
it can be accessed using the above name though



class person:
    def __init__(self):
        self.__name=''
    @property
    def name(self):
        return self.__name
    @name.setter
    def name(self, value):
        self.__name=value
    @name.deleter
    def name(self, value):
        print('Deleting..')
        del self.__name




@classmethod
The @classmethod decorator can be applied on any method of a class. This decorator will allow us to call that 
method using the class name instead of the object.
The method now can be called using both the object and the class

a method defined under @classmethod takes the class as the parameter. This class is used to use the class variable

class person:
    totalObjects=0
    def __init__(self):
        person.totalObjects=person.totalObjects+1

    @classmethod
    def showcount(cls):
        print("Total objects: ",cls.totalObjects)


The @staticmethod is a built-in decorator in Python which defines a static method. A static method doesn't receive any reference argument whether it is called by
 an instance of a class or by the class itself. The following notation is used to declare a static method in a class:
class person:
    @staticmethod
    def greet():
        print("Hello!")

@staticmethod does not take self as paramter
