arrays
we can initialize an array using an array list 
int a[5]={1,2,3,4,5};
if the number of initializations are more than 5(int the above example) then we get an error and if they are less, then the number of elements which are left are initialized with zero

to initialize all the elements to zero 
a[5]={}
here in place of number there cannot exist any value 'n' whose value we are going to input from the user

int prime[5] { 2, 3, 5, 7, 11 };
uniform initialization is also allowed

we can also write like a[]={1,2,3,4,5}
array size is updated according to the number of elements
enumerators can be used for indexing of array, so that we have information about the indexs(like what they represent)

as arrays can have big sizes so making their copy and sending is a big task, so they are sent as it is. 
In this process any changes which are made to the array by the function are reflected in the original array.

To stop this we can pass constant array

like void add(const int a[5]);
this will prevent any changes to the array

Array size in main will be the sum of sizes of all the elements, but the sizeof(array) in the function where it is passed is equal to the size of pointer.
length of an array can be found using sizeof(a)/sizeof(a[0]);

c++ lets you use indexs which are out of range for an array 
Although it happens less often, C++ will also let you use a negative index, with similarly undesirable results.



two dimensionsal array 
initialization a[2][2]={{1,2},{3,4}}
the leftmost length can be omitted as well
we can write it like a[][2]={{1,2},{3,4}}

two dimensional array can be initialized to zero using a[3][5]={0}

c style string is an array of characters
char myString[] = "string"; // ok  is perfectly fine


When printing a C-style string, std::cout prints characters until it encounters the null terminator. If you accidentally overwrite the null terminator in a string (e.g. by assigning something to myString[6]), you’ll not only get all the characters in the string, but std::cout will just keep printing everything in adjacent memory slots until it happens to hit a 0! but not 

cin.getline(a,255);
This call to cin.getline() will read up to 254 characters into name (leaving room for the null terminator!). Any excess characters will be discarded. In this way, we guarantee that we will not overflow the array!


************POINTERS********************

&X GIVES the address of the variable
* is called the derefernece operator and gives the value at a particular addresss

*&x gives the value stored in x.

when returning a pointer from a function, it’s clearer to put the asterisk next to the return type:

1
int* doSomething();


Just like normal variables, pointers are not initialized when declared. If not initialized with a value, they will contain garbage.


Note that the following is also not legal:

int *ptr = 5;
This is because pointers can only hold addresses, and the integer literal 




5 does not have a memory address. If you try this, the compiler will tell you it cannot convert an integer to an integer pointer.



So two more unary opertors added to our list are * and &


*** one very interesting fact I noted

suppose I have apointer and I initalize with a reference
int *x=&a
now I can print x and *x
now If I modify *x=b;
then at the same address as before I can store another variables

But make sure the initialization is with a reference only;
otherwise a segmentation fault occurs









************
pointer is a variable that holds a memory location as it's value
pointer declaration
int *ptr declares a pointer to a int 
for declaring multiple pointer we can write int *ptr1,*ptr2,,

int *ptr=&x
puts adress of x in ptr
*ptr will give its value
mind that int pointer can point to only a int value, not to a double,char or any other

int *ptr=5; is not a valid statement;

double *dPtr = 0x0012FF7C this is also not valid since the address is considered to be an int only

the &x operation does not return the address of x instead it returns a pointer to x;

pointers are required to have a type because otherwise we will have problem at the time of dereferncing.



int *p=&x;
*p=8
changes the value of x as well

the sizeof pointer is constant for all datatype and is dependent upon the system architecture. so for a 32 bit machine pointer size is 4 bytes 

uses of pointer 
1) Arrays are implemented using pointers. Pointers can be used to iterate through an array (as an alternative to array indices) (covered in lesson 6.8).
2) They are the only way you can dynamically allocate memory in C++ (covered in lesson 6.9). This is by far the most common use case for pointers.
3) They can be used to pass a large amount of data to a function in a way that doesn’t involve copying the data, which is inefficient (covered in lesson 7.4)
4) They can be used to pass a function as a parameter to another function (covered in lesson 7.8).
5) They can be used to achieve polymorphism when dealing with inheritance (covered in lesson 12.1).
6) They can be used to have one struct/class point at another struct/class, to form a chain. This is useful in some more advanced data structures, such as linked lists and trees.
***********************************



null pointers


beside addresses the pointers can also store null value;

a pointer beside storing the address,can also hold a null value.
int *p(0), *p{0} and ptr=0, are null pointers

instead of 0 null macro(NULL) can also be used

or nullptr should be used
this is because if we are using 0 for as an indication for null pointer, it confuses the compiler for understanding 0 as an int instead of an pointer




 If we want to write a function that accepts only a nullptr argument, what type do we make the parameter? The answer is std::nullptr_t.

void doSomething(std::nullptr_t ptr)
{
    std::cout << "in doSomething()\n";
}



dereferencing a null pointer or a garbage pointer leads to undefined bahavior

c has a macro called null so we have #define Null 0;

a null pointer in c++ is represented using nullptr

for a function to hold a null pointer variable it has to be of type 
nullptr_t




, when a fixed array is used in an expression, the fixed array will decay (be implicitly converted) into a pointer that points to the first element of the array. 
so if a is an array
cout a and "&a[0] " are same 

*a will give the value of a[0]

a and pointer p are not same as 
sizeof(a) gives the size of the array whereas the sizeof(p) gives the size of pointer which ais architecture dependent/

taking & of pointer returns the address of the pointer but for an array it returns an pointer to the complete array. This pointer points to the first element of the array


passsing of the arrays
arrays are not copied when passed to functions.
when an arrays is passed the array decays to a pointer and the pointer is passed.

while passing arrays 

1
2
void printSize(int array[]);
void printSize(int *array);

both of these operation are identical because the array is decayed into a pointer which is passed.


pass by address we 

int add(int *x, int *y)
{
return *x+*y;
}
main()


add(&x,&y);

***********Arrays in structs and classes don’t decay

Finally, it is worth noting that arrays that are part of structs or classes do not decay when the whole struct or class is passed to a function. This yields a useful way to prevent decay if desired, and will be valuable later when we write classes that utilize arrays.

pointer arithmatic
if ptr points to arr[0]
*(ptr+1) will point to arr[1]
ptr+1 is the address of arr[1]

array[n] is the same as *(array + n)


print an array using pointers 

int a[5]={1,2,3,4,5};
int no=5;
for(int *ptr=a;ptr<a+no;ptr++)
cout<<(*ptr)<<" ";


another way to create a string
const char *myName = "Alex";

so given arr, arr[3] is converted into *(arr+3) which is the 3 index


6.8b is left 

we have 3 types of allocations available
static --> memory is allocated only once
automatic --> memory is allocated and deallocated automatically .i.e in case of local variables.
dynamic memory allocation

the size of variable has to be defined before fed to the compiler, in both of the above cases.

dynamic memory allocation
int *ptr=new int
allocates a memory of size int and gives it to ptr
int *ptr=new int(4) or int{4} initializes the variables

delete ptr deletes the memory allocated to the variable

a pointer pointing to a deallocated memory is called the dangling pointer
dereferencing it leads to unknown bahavior
in codeblocks ide after deleting the pointer to the value , if I was again printing the contents of the dereferenced pointer I was getting 0;

if new fails to allocate memory a badd_alloc exception is generated

int *value = new (std::nothrow) int; returns a null pointer instead of a exception

null pointer is a pointer which points to address 0

there is no need to do this
if (ptr)
    delete ptr;

we can just do delete ptr;


allocated dynamic memory has no scope, although the pointers pointing to it have a local scope.

memory leak***
when the program allocates dynamic memory and the variable which was storing the addresss of that varibale gets lost or deleted then
that peice of memory cannot be used by anything. These memory can be reused by the system only after the program exits.
then the system runs it routines to capture all the leaked memory




Memory allocation

stack
heap
uniniatialized variables
intialized variables
text or code segment

text segment -> consist of executable instructions.
the text segment is often read-only, to prevent a program from accidentally modifying its instructions.

initialized data segment
 A data segment is a portion of virtual address space of a program, which contains the global variables and static variables that are initialized by the programmer.
Note that, data segment is not read-only, since the values of the variables can be altered at run time.


uninitialized data segment

Uninitialized data segment, often called the “bss” segment, named after an ancient assembler operator that stood for “block started by symbol.” Data in this segment is initialized by the kernel to arithmetic 0 before the program starts executing
uninitialized data starts at the end of the data segment and contains all global variables and static variables that are initialized to zero or do not have explicit initialization in source code.
For instance a variable declared static int i; would be contained in the BSS segment.
For instance a global variable declared int j; would be contained in the BSS segment.


refer this https://www.geeksforgeeks.org/memory-layout-of-c-program/
https://medium.com/@nickteixeira/stack-vs-heap-whats-the-difference-and-why-should-i-care-5abc78da1a88
https://www.youtube.com/watch?v=_8-ht2AKyH4


dynamic allocation of array

arrays are allocated using
int *array=new int[4]

size of dynamically allocated array can be more than the arrays to whom the memory is allocated at compile time
to delete the memory allocated we can use
delete[] array;
but how does delete know how much memory to delete
at the time of allocation new keeps a record of the allocated memory, so it passes it to delete but this size is not user accessible

	
int *array = new int[length](); this after dynamically allocating memory initializes all the elements to 0

the allocated array is accessible as
array[0]=5;

int *array = new int[5] { 9, 7, 5, 3, 1 };  to initializ an array
rules of array follow here as well

for keeping the syntax same fixed array can also be allocated in the same way -->  int fixedArray[5] { 9, 7, 5, 3, 1 };
int c++11
we cannot initialize a dynamically allocated character array
like char *array = new char[14] { "Hello, world!" };// can't do this

but we can initialize dynamically allocated string


dynamic array should be declared with an explicit size
int *dynamicArray2 = new int[3] {1, 2, 3}; 
int *dynamicArray2 = new int[] {1, 2, 3};--> not correct
to delete this dynamically allocated array 
delete[] dynamicArray2


One often asked question of array delete[] is, “How does array delete know how much memory to delete?” The answer is that array new[] keeps track of how much memory was allocated to a variable, so that array delete[] can delete the proper amount. Unfortunately, this size/length isn’t accessible to the programmer.



const int value = 5; // value is const
int *ptr = &value; // compile error: cannot convert const int* to int*
*ptr = 6; 
thhis is because if could assign a const to a pointer then technically we shoudl be able to change the contents og the pointer by dereferencing it but a constant value can't cahnge

but a const pointer can hold the value of a variable
like val=5
const int *p=&val

this is possible
int value = 5;
const int *ptr = &value; // ptr points to a "const int"
value = 6;  

but this is not
int value = 5;
const int *ptr = &value; // ptr points to a "const int"
*ptr=6;

so if we write const int *p=&value
then p can be modified but *p not. ************ const int *ptr means *ptr is constant
int *const p means p is constant
so *p can be modified but not p

const int *const p =&value
neither can p be modified nor *p



Reference variables
if value=7
and int &p=value;
then p act as alias to the variable value
any change to variable p will affect on value;
if &value or &p is printed we get the same value;
so p is called an refernce to varible value

refernces are required to be initialized at the time of declaration
there does not exist anything like a null refernce

so we cannot make int &x;


References to non-const values can only be initialized with non-const l-values. They can not be initialized with const l-values or r-values.
just keep in mind one thing that only constant refernce can be reference to a constant variable
other 2 cases are not possible

references once initialized cannot be re assigned
References are most often used as function parameters. In this context, the reference parameter acts as an alias for the argument, and no copy of the argument is made into the parameter. This can lead to better performance if the argument is large or expensive to copy.


these references are genrally useed while passing parameters to a function 

viod add(int &p)
{}
p acts as an alias to the sent argument

One of the most annoying issues with C-style arrays is that in most cases they decay to pointers when evaluated. However, if a C-style array is passed by reference, this decaying does not happen.
void printElements(int (&arr)[4])  --> you can use this array (the only thing is that we have to pass array size;

we can use references for shortcuts. 
For eg 
suppose I make use of a variable like a.b.v1;
then I can do int &ref=a.b.v1
and use ref

if I have to access variables which is in one class in a second class
so we write something like other.something.value1;
then we can write int &ref = other.something.value1; 
and conveniently use ref instead of the big term.


constant references are references to constant values
for eg cons int &ref=x
where x is constant;

if reference is constant then it can point to some constant values like a number as well. 
For eg const int &ref=6;


references even work in place of objects. 
For eg Person &ref=person(person is a object)
now same as you would have use the members of person class, you can use the members of person class using ref

but pointers have to be dreferenced first
Person *ptr = &person;
(*ptr).age= 5;
alternate syntax= ptr->age=5;


for each loop in c++
for(x:array)
cout<<x;

any change meade to this x will not get reflected in the array[]
to make the changes get reflected we can write
for(int &x:array)
now any changes will be reflected 
also &x will stop making acopy of the array element
But suppose we did not wanted the user to change the elements
we can write for(const int &x:array)
this will stop the copy as well


For-each doesn’t work with pointers to an array
so we cannot use this loop in arrays received in a function


void pointers can(void *ptr) can point to any datatype. But to use them (dereference them) we have to first cast them 
this can be done using int *a=static_cast<int *>(ptr)


void pointers

it is a special type of pointer and can be pointed at object of any datatype
void *ptr = object of class , int x,int y

but void pointer can't be dereferenced directly, to derefernce them they have to be first type casted

for example

int value = 5;
void *voidPtr = &value;
 
//cout << *voidPtr << endl; // illegal: cannot dereference a void pointer
 
int *intPtr = static_cast<int*>(voidPtr); // however, if we cast our void pointer to an int pointer...
 
cout << *intPtr << endl; // then we can dereference it like normal

there is nothing as void reference



#include<array>
std::array<double, 5> myArray { 9.0, 7.2, 5.4, 3.6, 1.8 };
it declares an array of size 5, all normal rules are followed except 1 .i.e while initialization of array we have to always give the size, we cannot ommit it 

Because std::array doesn’t decay to a pointer when passed to a function, the size() function will work even if you call it from within a function:

Rule: Always pass std::array by reference or const reference
because we don't want to make its copy


vector is remaining


