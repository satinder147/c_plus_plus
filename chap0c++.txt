compiler vs interpreter
compilers can see the complete code, so they can make optimizations
compiled code is faster because the intructions executed are of only the executable and there is no overhead from the interpreter

compilers generally have a startup time because of all the optimization they have to do.
compilers cannot always predict what will happen during runtime so a compiler cannot always generate optimized code.


interpreter
they startup faster than compilers because they do not do any analysis and optimzation.
code runs line by line
can be easily debugged

Runs slow because there is a overhead of the running the interpreter as well



As both the compiler and the interpreter have advantages of their own, so these days languages combine the strength of both of them.
Line Javascript is interpreted, but if it is observed that the code runs frequently then some js engines compile that code or atleast ccompile bits and pieces of the code.


c code is interpreted during debugging
js code was thought to be interpreted but now some js engines compile it as well.



It's worth noting that languages are not interpreted or compiled, but rather language implementations either interpret or compile code.




c++
files can be saved using .cpp and .cc or .cxx format
header files can have extension  .h, .hpp, or .hxx

it was developed by Bjarne Stroustrup

high level programs are converted into machine level code using two things
1)interpreter
2)compiler


Compiler reads a code and produces a standalone eecutable program that the cpu can understand directly.Once compiled, it is not necessary to be compiled again.

high level language-->compiler-->executable-->cpu-->program results

--------------------------------------------------
interpreter runs the code without compiling it into machine code first. interpreter are more flexible but they are less efficient as the interpretting process has to be done every time we run the code.
high level language--> interpreter-->cpu-->program results

eg perl and javascript


problem with c++ is that when the code is compiled it is compiled according to the platform specific functions which reducces the overall portability of the executable.

c++ is modified from c



how a problem is solved in c++
definition of the problem
design a solution
write  a program that implements the solution
compile the program
link object files
test and debug the program



Compiling  

Job of compiler is 
1)to check  your program and make sure it follows the rules of c++ language.
2)
to convert each file of the source code into machine language file called object file
object files are generally named abc.o, abc.obj.
where abc is from abc.cpp


when we write g++ -c file.cpp 
it produces file.o file.

Linking
Complete process of linking
It is the process of taking all the object files generated by the compiler and combining them into a single executable program that we can run. This process is called linking and is done by the linker





a.o+b.o+c.o +runtime support--->linker-->executable file

g++ -o prog file1.o file2.o file3.o 
-o tells g++ that we want an executable file named prog that is built from file1.o,file2.o...

the compile and link steps can be combined together using 
g++ -o prog file1.cpp file2.cpp file3.cpp
This compiles and link steps together and directly to produce an executable.

Testing and debuggin



build configuration holds the setting for different version of your project




Few common problems in c++


if the wondow doesnt stop and vanishes 
then we have to do this after writing the complete code
cin.clear()
cin.ignore(32767,'\n')
cin.get();




complete compilation process
each file is compiled into a .obj or .o file. All these files are then linked together using the linker to make a .exe file


1) preprocessor
only source code files are passed to the compiler. Header files are not passed.
for each c++ source file the preprocesser makes a translation unit. In this translation unit the source code from the headers is copied along with the original source code. Apart from this the preprocessor also do some macro replacements and also some conditional #if statements are processed.
These translation units are then passed to the compiler for converting it into 
To get the output of the preprocessor. gedit -E a.cpp -o a.ii (after -o we pass the name of the ouput)

wc -c name of file --> gives the number of characters in a file
wc -l number of lines 
